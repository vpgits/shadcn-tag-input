{
  "name": "tag-input",
  "type": "components:ui",
  "description": "A searchable tag input component with pill-style tags",
  "dependencies": {
    "@radix-ui/react-dialog": "*",
    "@radix-ui/react-popover": "*",
    "@radix-ui/react-slot": "*",
    "class-variance-authority": "*",
    "clsx": "*",
    "cmdk": "*",
    "lucide-react": "*",
    "tailwind-merge": "*",
    "tailwindcss-animate": "*"
  },
  "registryDependencies": [
    "command",
    "badge"
  ],
  "files": [
    {
      "name": "ui/tag-input.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"./ui/command\";\r\nimport { X } from \"lucide-react\";\r\nimport { Command as CommandPrimitive } from \"cmdk\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport Pill from \"./pill\";\r\n\r\nexport type Tag<T> = {\r\n  label: string;\r\n  value: T;\r\n};\r\n\r\ninterface TagInputProps<T> {\r\n  tags: Tag<T>[];\r\n  setTags: (tags: Tag<T>[]) => void;\r\n  allTags: Tag<T>[];\r\n  AllTagsLabel?: ({ value }: { value: T }) => React.ReactNode;\r\n  placeholder?: string;\r\n  className?: string;\r\n}\r\n\r\nconst CommandInput = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Input>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\r\n>(({ className, ...props }, ref) => (\r\n  <div className=\"flex items-center px-3\" cmdk-input-wrapper=\"\">\r\n    <CommandPrimitive.Input\r\n      ref={ref}\r\n      className={cn(\r\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </div>\r\n));\r\n\r\nCommandInput.displayName = \"CommandInput\";\r\n\r\nexport function TagInput<T>({\r\n  tags,\r\n  setTags,\r\n  allTags,\r\n  AllTagsLabel,\r\n  placeholder = \"Add tag\",\r\n  className,\r\n  ...props\r\n}: TagInputProps<T>) {\r\n  const container = React.useRef<HTMLDivElement>(null);\r\n  const commandInput = React.useRef<HTMLInputElement>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const handleClick = (event: MouseEvent) => {\r\n      if (\r\n        container.current &&\r\n        !container.current.contains(event.target as Node)\r\n      ) {\r\n        setOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"click\", handleClick);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClick);\r\n    };\r\n  }, []);\r\n\r\n  const handleBackSpace = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Backspace\" && inputValue === \"\") {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      setTags(tags.slice(0, tags.length - 1));\r\n    }\r\n  };\r\n\r\n  const handleValueChange = (value: string) => {\r\n    setInputValue(value);\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleSelect = (selectedTag: Tag<T>) => {\r\n    if (!tags.some((tag) => tag.label === selectedTag.label)) {\r\n      setTags([...tags, selectedTag]);\r\n    }\r\n    setInputValue(\"\");\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleRemove = (tagToRemove: Tag<T>) => {\r\n    setTags(tags.filter((tag) => tag.label !== tagToRemove.label));\r\n  };\r\n\r\n  const handleClear = () => {\r\n    if (inputValue !== \"\") {\r\n      setInputValue(\"\");\r\n    } else {\r\n      setTags([]);\r\n    }\r\n  };\r\n\r\n  const filteredTags = allTags.filter(\r\n    (tag) =>\r\n      tag.label.toLowerCase().includes(inputValue.toLowerCase()) &&\r\n      !tags.some((selectedTag) => selectedTag.label === tag.label)\r\n  );\r\n\r\n  return (\r\n    <div className={(cn(\"space-y-2\"), className)} ref={container} {...props}>\r\n      <Command className={cn(\"rounded\", className)}>\r\n        <div\r\n          className={cn(\r\n            \"flex w-full items-center flex-wrap gap-2 border rounded-md p-2 hover:cursor-text \"\r\n          )}\r\n          onClick={() => commandInput.current?.focus()}\r\n        >\r\n          {tags.map((tag) => (\r\n            <Pill\r\n              key={tag.label}\r\n              label={tag.label}\r\n              onClick={() => handleRemove(tag)}\r\n            />\r\n          ))}\r\n\r\n          <div className=\"flex flex-grow items-center justify-end\">\r\n            <div className=\"flex-1 min-w-0\">\r\n              <CommandInput\r\n                placeholder={placeholder}\r\n                value={inputValue}\r\n                onValueChange={handleValueChange}\r\n                onKeyDown={handleBackSpace}\r\n                className=\"h-2 w-full\"\r\n                ref={commandInput}\r\n              />\r\n            </div>\r\n            <X\r\n              className=\"w-4 h-4 flex-shrink-0 cursor-pointer hover:text-red-700 transition-colors ml-2\"\r\n              onClick={handleClear}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {open && (\r\n          <div className=\"w-full\">\r\n            <CommandList\r\n              className={cn(\r\n                \"hide-scrollbar bg-primary-foreground w-full rounded-md\"\r\n              )}\r\n            >\r\n              <CommandEmpty>No tags found.</CommandEmpty>\r\n              <CommandGroup>\r\n                {filteredTags.map((tag) => (\r\n                  <CommandItem\r\n                    key={tag.label}\r\n                    value={tag.label}\r\n                    onSelect={() => handleSelect(tag)}\r\n                    className=\"hover:cursor-pointer\"\r\n                  >\r\n                    {AllTagsLabel ? (\r\n                      <AllTagsLabel value={tag.value} />\r\n                    ) : (\r\n                      tag.label\r\n                    )}\r\n                  </CommandItem>\r\n                ))}\r\n              </CommandGroup>\r\n            </CommandList>\r\n          </div>\r\n        )}\r\n      </Command>\r\n    </div>\r\n  );\r\n}\r\n"
    },
    {
      "name": "ui/pill.tsx",
      "content": "import { cn } from \"@/lib/utils\";\r\nimport { X } from \"lucide-react\";\r\nimport { Badge } from \"./ui/badge\";\r\n\r\ninterface PillProps {\r\n  label: string;\r\n  className?: string;\r\n  onClick?: () => void;\r\n}\r\n\r\nexport default function Pill({ label, className, onClick }: PillProps) {\r\n  return (\r\n    <Badge\r\n      className={cn(\r\n        \"px-2 py-1 flex items-center justify-between gap-2 bg-inherit hover:bg-inherit text-muted-foreground border border-muted-foreground rounded-md\",\r\n        className\r\n      )}\r\n    >\r\n      <span className=\"flex-1 text-center\">{label}</span>\r\n      {onClick && (\r\n        <X\r\n          className=\"w-4 h-4 flex-shrink-0 cursor-pointer hover:text-red-700 transition-colors\"\r\n          onClick={onClick}\r\n        />\r\n      )}\r\n    </Badge>\r\n  );\r\n}\r\n"
    },
    {
      "name": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
    }
  ],
  "implements": "Tag Input"
}